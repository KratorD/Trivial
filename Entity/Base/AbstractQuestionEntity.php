<?php
/**
 * Trivial.
 *
 * @copyright Krator (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Krator <kratord@hotmail.com>.
 * @link https://www.heroesofmightandmagic.es
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.2.0 (https://modulestudio.de).
 */

namespace Zikula\TrivialModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use Zikula\TrivialModule\Traits\StandardFieldsTrait;
use Zikula\TrivialModule\Validator\Constraints as TrivialAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for question entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractQuestionEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'question';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @TrivialAssert\ListEntry(entityName="question", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $question
     */
    protected $question = '';
    
    /**
     * @ORM\Column(type="smallint")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=10000)
     * @var integer $corrAnswer
     */
    protected $corrAnswer = 0;
    
    
    /**
     * @ORM\OneToMany(targetEntity="\Zikula\TrivialModule\Entity\QuestionCategoryEntity", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true)
     * @var \Zikula\TrivialModule\Entity\QuestionCategoryEntity
     */
    protected $categories = null;
    
    /**
     * Bidirectional - Many questions [questions] are linked by one tournament [tournament] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="Zikula\TrivialModule\Entity\TournamentEntity", inversedBy="questions")
     * @ORM\JoinTable(name="zikula_trivial_tournament")
     * @Assert\Type(type="Zikula\TrivialModule\Entity\TournamentEntity")
     * @var \Zikula\TrivialModule\Entity\TournamentEntity $tournament
     */
    protected $tournament;
    
    /**
     * Bidirectional - One question [question] has many answers [answers] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="Zikula\TrivialModule\Entity\AnswerEntity", mappedBy="question")
     * @ORM\JoinTable(name="zikula_trivial_questionanswers")
     * @var \Zikula\TrivialModule\Entity\AnswerEntity[] $answers
     */
    protected $answers = null;
    
    
    /**
     * QuestionEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->answers = new ArrayCollection();
        $this->categories = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the question.
     *
     * @return string
     */
    public function getQuestion()
    {
        return $this->question;
    }
    
    /**
     * Sets the question.
     *
     * @param string $question
     *
     * @return void
     */
    public function setQuestion($question)
    {
        if ($this->question !== $question) {
            $this->question = isset($question) ? $question : '';
        }
    }
    
    /**
     * Returns the corr answer.
     *
     * @return integer
     */
    public function getCorrAnswer()
    {
        return $this->corrAnswer;
    }
    
    /**
     * Sets the corr answer.
     *
     * @param integer $corrAnswer
     *
     * @return void
     */
    public function setCorrAnswer($corrAnswer)
    {
        if (intval($this->corrAnswer) !== intval($corrAnswer)) {
            $this->corrAnswer = intval($corrAnswer);
        }
    }
    
    /**
     * Returns the categories.
     *
     * @return ArrayCollection[]
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    
    /**
     * Sets the categories.
     *
     * @param ArrayCollection $categories List of categories
     *
     * @return void
     */
    public function setCategories(ArrayCollection $categories)
    {
        foreach ($this->categories as $category) {
            if (false === $key = $this->collectionContains($categories, $category)) {
                $this->categories->removeElement($category);
            } else {
                $categories->remove($key);
            }
        }
        foreach ($categories as $category) {
            $this->categories->add($category);
        }
    }
    
    /**
     * Checks if a collection contains an element based only on two criteria (categoryRegistryId, category).
     *
     * @param ArrayCollection $collection Given collection
     * @param \Zikula\TrivialModule\Entity\QuestionCategoryEntity $element Element to search for
     *
     * @return bool|int
     */
    private function collectionContains(ArrayCollection $collection, \Zikula\TrivialModule\Entity\QuestionCategoryEntity $element)
    {
        foreach ($collection as $key => $category) {
            /** @var \Zikula\TrivialModule\Entity\QuestionCategoryEntity $category */
            if ($category->getCategoryRegistryId() == $element->getCategoryRegistryId()
                && $category->getCategory() == $element->getCategory()
            ) {
                return $key;
            }
        }
    
        return false;
    }
    
    /**
     * Returns the tournament.
     *
     * @return \Zikula\TrivialModule\Entity\TournamentEntity
     */
    public function getTournament()
    {
        return $this->tournament;
    }
    
    /**
     * Sets the tournament.
     *
     * @param \Zikula\TrivialModule\Entity\TournamentEntity $tournament
     *
     * @return void
     */
    public function setTournament($tournament = null)
    {
        $this->tournament = $tournament;
    }
    
    /**
     * Returns the answers.
     *
     * @return \Zikula\TrivialModule\Entity\AnswerEntity[]
     */
    public function getAnswers()
    {
        return $this->answers;
    }
    
    /**
     * Sets the answers.
     *
     * @param \Zikula\TrivialModule\Entity\AnswerEntity[] $answers
     *
     * @return void
     */
    public function setAnswers($answers)
    {
        foreach ($this->answers as $answerSingle) {
            $this->removeAnswers($answerSingle);
        }
        foreach ($answers as $answerSingle) {
            $this->addAnswers($answerSingle);
        }
    }
    
    /**
     * Adds an instance of \Zikula\TrivialModule\Entity\AnswerEntity to the list of answers.
     *
     * @param \Zikula\TrivialModule\Entity\AnswerEntity $answer The instance to be added to the collection
     *
     * @return void
     */
    public function addAnswers(\Zikula\TrivialModule\Entity\AnswerEntity $answer)
    {
        $this->answers->add($answer);
        $answer->setQuestion($this);
    }
    
    /**
     * Removes an instance of \Zikula\TrivialModule\Entity\AnswerEntity from the list of answers.
     *
     * @param \Zikula\TrivialModule\Entity\AnswerEntity $answer The instance to be removed from the collection
     *
     * @return void
     */
    public function removeAnswers(\Zikula\TrivialModule\Entity\AnswerEntity $answer)
    {
        $this->answers->removeElement($answer);
        $answer->setQuestion(null);
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array List of resulting arguments
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'zikulatrivialmodule.ui_hooks.questions';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects Objects that are added to this array
     * 
     * @return array List of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = [])
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Question ' . $this->getKey() . ': ' . $this->getQuestion();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    
        // clone categories
        $categories = $this->categories;
        $this->categories = new ArrayCollection();
        foreach ($categories as $c) {
            $newCat = clone $c;
            $this->categories->add($newCat);
            $newCat->setEntity($this);
        }
    }
}
