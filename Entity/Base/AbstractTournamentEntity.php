<?php
/**
 * Trivial.
 *
 * @copyright Krator (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Krator <kratord@hotmail.com>.
 * @link https://www.heroesofmightandmagic.es
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.2.0 (https://modulestudio.de).
 */

namespace Zikula\TrivialModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use Zikula\TrivialModule\Traits\StandardFieldsTrait;
use Zikula\TrivialModule\Validator\Constraints as TrivialAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for tournament entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractTournamentEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'tournament';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @TrivialAssert\ListEntry(entityName="tournament", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=50)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="50")
     * @var string $name
     */
    protected $name = '';
    
    /**
     * @ORM\Column(type="date")
     * @Assert\NotNull()
     * @Assert\Date()
     * @var date $dateFrom
     */
    protected $dateFrom;
    
    /**
     * @ORM\Column(type="date")
     * @Assert\NotNull()
     * @Assert\Date()
     * @Assert\Expression("!value or value > this.getDateFrom()")
     * @var date $dateTo
     */
    protected $dateTo;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $active
     */
    protected $active = false;
    
    /**
     * @ORM\Column(type="smallint")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=10000)
     * @var integer $nQuestions
     */
    protected $nQuestions = 0;
    
    
    /**
     * Bidirectional - One tournament [tournament] has many questions [questions] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="Zikula\TrivialModule\Entity\QuestionEntity", mappedBy="tournament")
     * @ORM\JoinTable(name="zikula_trivial_tournamentquestions")
     * @var \Zikula\TrivialModule\Entity\QuestionEntity[] $questions
     */
    protected $questions = null;
    
    
    /**
     * TournamentEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->questions = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Sets the name.
     *
     * @param string $name
     *
     * @return void
     */
    public function setName($name)
    {
        if ($this->name !== $name) {
            $this->name = isset($name) ? $name : '';
        }
    }
    
    /**
     * Returns the date from.
     *
     * @return date
     */
    public function getDateFrom()
    {
        return $this->dateFrom;
    }
    
    /**
     * Sets the date from.
     *
     * @param date $dateFrom
     *
     * @return void
     */
    public function setDateFrom($dateFrom)
    {
        if ($this->dateFrom !== $dateFrom) {
            if (!(null == $dateFrom && empty($dateFrom)) && !(is_object($dateFrom) && $dateFrom instanceOf \DateTime)) {
                $dateFrom = new \DateTime($dateFrom);
            }
            
            if (null === $dateFrom || empty($dateFrom)) {
                $dateFrom = new \DateTime();
            }
            
            if ($this->dateFrom != $dateFrom) {
                $this->dateFrom = $dateFrom;
            }
        }
    }
    
    /**
     * Returns the date to.
     *
     * @return date
     */
    public function getDateTo()
    {
        return $this->dateTo;
    }
    
    /**
     * Sets the date to.
     *
     * @param date $dateTo
     *
     * @return void
     */
    public function setDateTo($dateTo)
    {
        if ($this->dateTo !== $dateTo) {
            if (!(null == $dateTo && empty($dateTo)) && !(is_object($dateTo) && $dateTo instanceOf \DateTime)) {
                $dateTo = new \DateTime($dateTo);
            }
            
            if (null === $dateTo || empty($dateTo)) {
                $dateTo = new \DateTime();
            }
            
            if ($this->dateTo != $dateTo) {
                $this->dateTo = $dateTo;
            }
        }
    }
    
    /**
     * Returns the active.
     *
     * @return boolean
     */
    public function getActive()
    {
        return $this->active;
    }
    
    /**
     * Sets the active.
     *
     * @param boolean $active
     *
     * @return void
     */
    public function setActive($active)
    {
        if (boolval($this->active) !== boolval($active)) {
            $this->active = boolval($active);
        }
    }
    
    /**
     * Returns the n questions.
     *
     * @return integer
     */
    public function getNQuestions()
    {
        return $this->nQuestions;
    }
    
    /**
     * Sets the n questions.
     *
     * @param integer $nQuestions
     *
     * @return void
     */
    public function setNQuestions($nQuestions)
    {
        if (intval($this->nQuestions) !== intval($nQuestions)) {
            $this->nQuestions = intval($nQuestions);
        }
    }
    
    
    /**
     * Returns the questions.
     *
     * @return \Zikula\TrivialModule\Entity\QuestionEntity[]
     */
    public function getQuestions()
    {
        return $this->questions;
    }
    
    /**
     * Sets the questions.
     *
     * @param \Zikula\TrivialModule\Entity\QuestionEntity[] $questions
     *
     * @return void
     */
    public function setQuestions($questions)
    {
        foreach ($this->questions as $questionSingle) {
            $this->removeQuestions($questionSingle);
        }
        foreach ($questions as $questionSingle) {
            $this->addQuestions($questionSingle);
        }
    }
    
    /**
     * Adds an instance of \Zikula\TrivialModule\Entity\QuestionEntity to the list of questions.
     *
     * @param \Zikula\TrivialModule\Entity\QuestionEntity $question The instance to be added to the collection
     *
     * @return void
     */
    public function addQuestions(\Zikula\TrivialModule\Entity\QuestionEntity $question)
    {
        $this->questions->add($question);
        $question->setTournament($this);
    }
    
    /**
     * Removes an instance of \Zikula\TrivialModule\Entity\QuestionEntity from the list of questions.
     *
     * @param \Zikula\TrivialModule\Entity\QuestionEntity $question The instance to be removed from the collection
     *
     * @return void
     */
    public function removeQuestions(\Zikula\TrivialModule\Entity\QuestionEntity $question)
    {
        $this->questions->removeElement($question);
        $question->setTournament(null);
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array List of resulting arguments
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'zikulatrivialmodule.ui_hooks.tournaments';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects Objects that are added to this array
     * 
     * @return array List of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = [])
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Tournament ' . $this->getKey() . ': ' . $this->getName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
