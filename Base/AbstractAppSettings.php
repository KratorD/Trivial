<?php
/**
 * Trivial.
 *
 * @copyright Krator (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Krator <kratord@hotmail.com>.
 * @link https://www.heroesofmightandmagic.es
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.2.0 (https://modulestudio.de).
 */

namespace Zikula\TrivialModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\TrivialModule\Validator\Constraints as TrivialAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * The amount of tournaments shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $tournamentEntriesPerPage
     */
    protected $tournamentEntriesPerPage = 10;
    
    /**
     * Whether to add a link to tournaments of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnTournamentsOnAccountPage
     */
    protected $linkOwnTournamentsOnAccountPage = true;
    
    /**
     * The amount of questions shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $questionEntriesPerPage
     */
    protected $questionEntriesPerPage = 10;
    
    /**
     * Whether to add a link to questions of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnQuestionsOnAccountPage
     */
    protected $linkOwnQuestionsOnAccountPage = true;
    
    /**
     * The amount of answers shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $answerEntriesPerPage
     */
    protected $answerEntriesPerPage = 10;
    
    /**
     * Whether to add a link to answers of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnAnswersOnAccountPage
     */
    protected $linkOwnAnswersOnAccountPage = true;
    
    /**
     * The amount of results shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $resultEntriesPerPage
     */
    protected $resultEntriesPerPage = 10;
    
    /**
     * Whether to add a link to results of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnResultsOnAccountPage
     */
    protected $linkOwnResultsOnAccountPage = true;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull()
     * @TrivialAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = 'question';
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     */
    public function __construct(
        VariableApiInterface $variableApi
    ) {
        $this->variableApi = $variableApi;
    
        $this->load();
    }
    
    /**
     * Returns the tournament entries per page.
     *
     * @return integer
     */
    public function getTournamentEntriesPerPage()
    {
        return $this->tournamentEntriesPerPage;
    }
    
    /**
     * Sets the tournament entries per page.
     *
     * @param integer $tournamentEntriesPerPage
     *
     * @return void
     */
    public function setTournamentEntriesPerPage($tournamentEntriesPerPage)
    {
        if (intval($this->tournamentEntriesPerPage) !== intval($tournamentEntriesPerPage)) {
            $this->tournamentEntriesPerPage = intval($tournamentEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own tournaments on account page.
     *
     * @return boolean
     */
    public function getLinkOwnTournamentsOnAccountPage()
    {
        return $this->linkOwnTournamentsOnAccountPage;
    }
    
    /**
     * Sets the link own tournaments on account page.
     *
     * @param boolean $linkOwnTournamentsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnTournamentsOnAccountPage($linkOwnTournamentsOnAccountPage)
    {
        if (boolval($this->linkOwnTournamentsOnAccountPage) !== boolval($linkOwnTournamentsOnAccountPage)) {
            $this->linkOwnTournamentsOnAccountPage = boolval($linkOwnTournamentsOnAccountPage);
        }
    }
    
    /**
     * Returns the question entries per page.
     *
     * @return integer
     */
    public function getQuestionEntriesPerPage()
    {
        return $this->questionEntriesPerPage;
    }
    
    /**
     * Sets the question entries per page.
     *
     * @param integer $questionEntriesPerPage
     *
     * @return void
     */
    public function setQuestionEntriesPerPage($questionEntriesPerPage)
    {
        if (intval($this->questionEntriesPerPage) !== intval($questionEntriesPerPage)) {
            $this->questionEntriesPerPage = intval($questionEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own questions on account page.
     *
     * @return boolean
     */
    public function getLinkOwnQuestionsOnAccountPage()
    {
        return $this->linkOwnQuestionsOnAccountPage;
    }
    
    /**
     * Sets the link own questions on account page.
     *
     * @param boolean $linkOwnQuestionsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnQuestionsOnAccountPage($linkOwnQuestionsOnAccountPage)
    {
        if (boolval($this->linkOwnQuestionsOnAccountPage) !== boolval($linkOwnQuestionsOnAccountPage)) {
            $this->linkOwnQuestionsOnAccountPage = boolval($linkOwnQuestionsOnAccountPage);
        }
    }
    
    /**
     * Returns the answer entries per page.
     *
     * @return integer
     */
    public function getAnswerEntriesPerPage()
    {
        return $this->answerEntriesPerPage;
    }
    
    /**
     * Sets the answer entries per page.
     *
     * @param integer $answerEntriesPerPage
     *
     * @return void
     */
    public function setAnswerEntriesPerPage($answerEntriesPerPage)
    {
        if (intval($this->answerEntriesPerPage) !== intval($answerEntriesPerPage)) {
            $this->answerEntriesPerPage = intval($answerEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own answers on account page.
     *
     * @return boolean
     */
    public function getLinkOwnAnswersOnAccountPage()
    {
        return $this->linkOwnAnswersOnAccountPage;
    }
    
    /**
     * Sets the link own answers on account page.
     *
     * @param boolean $linkOwnAnswersOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnAnswersOnAccountPage($linkOwnAnswersOnAccountPage)
    {
        if (boolval($this->linkOwnAnswersOnAccountPage) !== boolval($linkOwnAnswersOnAccountPage)) {
            $this->linkOwnAnswersOnAccountPage = boolval($linkOwnAnswersOnAccountPage);
        }
    }
    
    /**
     * Returns the result entries per page.
     *
     * @return integer
     */
    public function getResultEntriesPerPage()
    {
        return $this->resultEntriesPerPage;
    }
    
    /**
     * Sets the result entries per page.
     *
     * @param integer $resultEntriesPerPage
     *
     * @return void
     */
    public function setResultEntriesPerPage($resultEntriesPerPage)
    {
        if (intval($this->resultEntriesPerPage) !== intval($resultEntriesPerPage)) {
            $this->resultEntriesPerPage = intval($resultEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own results on account page.
     *
     * @return boolean
     */
    public function getLinkOwnResultsOnAccountPage()
    {
        return $this->linkOwnResultsOnAccountPage;
    }
    
    /**
     * Sets the link own results on account page.
     *
     * @param boolean $linkOwnResultsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnResultsOnAccountPage($linkOwnResultsOnAccountPage)
    {
        if (boolval($this->linkOwnResultsOnAccountPage) !== boolval($linkOwnResultsOnAccountPage)) {
            $this->linkOwnResultsOnAccountPage = boolval($linkOwnResultsOnAccountPage);
        }
    }
    
    /**
     * Returns the enabled finder types.
     *
     * @return string
     */
    public function getEnabledFinderTypes()
    {
        return $this->enabledFinderTypes;
    }
    
    /**
     * Sets the enabled finder types.
     *
     * @param string $enabledFinderTypes
     *
     * @return void
     */
    public function setEnabledFinderTypes($enabledFinderTypes)
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = isset($enabledFinderTypes) ? $enabledFinderTypes : '';
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('ZikulaTrivialModule');
    
        if (isset($moduleVars['tournamentEntriesPerPage'])) {
            $this->setTournamentEntriesPerPage($moduleVars['tournamentEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnTournamentsOnAccountPage'])) {
            $this->setLinkOwnTournamentsOnAccountPage($moduleVars['linkOwnTournamentsOnAccountPage']);
        }
        if (isset($moduleVars['questionEntriesPerPage'])) {
            $this->setQuestionEntriesPerPage($moduleVars['questionEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnQuestionsOnAccountPage'])) {
            $this->setLinkOwnQuestionsOnAccountPage($moduleVars['linkOwnQuestionsOnAccountPage']);
        }
        if (isset($moduleVars['answerEntriesPerPage'])) {
            $this->setAnswerEntriesPerPage($moduleVars['answerEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnAnswersOnAccountPage'])) {
            $this->setLinkOwnAnswersOnAccountPage($moduleVars['linkOwnAnswersOnAccountPage']);
        }
        if (isset($moduleVars['resultEntriesPerPage'])) {
            $this->setResultEntriesPerPage($moduleVars['resultEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnResultsOnAccountPage'])) {
            $this->setLinkOwnResultsOnAccountPage($moduleVars['linkOwnResultsOnAccountPage']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        $this->variableApi->set('ZikulaTrivialModule', 'tournamentEntriesPerPage', $this->getTournamentEntriesPerPage());
        $this->variableApi->set('ZikulaTrivialModule', 'linkOwnTournamentsOnAccountPage', $this->getLinkOwnTournamentsOnAccountPage());
        $this->variableApi->set('ZikulaTrivialModule', 'questionEntriesPerPage', $this->getQuestionEntriesPerPage());
        $this->variableApi->set('ZikulaTrivialModule', 'linkOwnQuestionsOnAccountPage', $this->getLinkOwnQuestionsOnAccountPage());
        $this->variableApi->set('ZikulaTrivialModule', 'answerEntriesPerPage', $this->getAnswerEntriesPerPage());
        $this->variableApi->set('ZikulaTrivialModule', 'linkOwnAnswersOnAccountPage', $this->getLinkOwnAnswersOnAccountPage());
        $this->variableApi->set('ZikulaTrivialModule', 'resultEntriesPerPage', $this->getResultEntriesPerPage());
        $this->variableApi->set('ZikulaTrivialModule', 'linkOwnResultsOnAccountPage', $this->getLinkOwnResultsOnAccountPage());
        $this->variableApi->set('ZikulaTrivialModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
