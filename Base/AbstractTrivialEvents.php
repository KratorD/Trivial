<?php
/**
 * Trivial.
 *
 * @copyright Krator (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Krator <kratord@hotmail.com>.
 * @link https://www.heroesofmightandmagic.es
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.2.0 (https://modulestudio.de).
 */

namespace Zikula\TrivialModule\Base;

/**
 * Events definition base class.
 */
abstract class AbstractTrivialEvents
{
    /**
     * The zikulatrivialmodule.tournament_post_load event is thrown when tournaments
     * are loaded from the database.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterTournamentEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const TOURNAMENT_POST_LOAD = 'zikulatrivialmodule.tournament_post_load';
    
    /**
     * The zikulatrivialmodule.tournament_pre_persist event is thrown before a new tournament
     * is created in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterTournamentEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const TOURNAMENT_PRE_PERSIST = 'zikulatrivialmodule.tournament_pre_persist';
    
    /**
     * The zikulatrivialmodule.tournament_post_persist event is thrown after a new tournament
     * has been created in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterTournamentEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const TOURNAMENT_POST_PERSIST = 'zikulatrivialmodule.tournament_post_persist';
    
    /**
     * The zikulatrivialmodule.tournament_pre_remove event is thrown before an existing tournament
     * is removed from the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterTournamentEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const TOURNAMENT_PRE_REMOVE = 'zikulatrivialmodule.tournament_pre_remove';
    
    /**
     * The zikulatrivialmodule.tournament_post_remove event is thrown after an existing tournament
     * has been removed from the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterTournamentEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const TOURNAMENT_POST_REMOVE = 'zikulatrivialmodule.tournament_post_remove';
    
    /**
     * The zikulatrivialmodule.tournament_pre_update event is thrown before an existing tournament
     * is updated in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterTournamentEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const TOURNAMENT_PRE_UPDATE = 'zikulatrivialmodule.tournament_pre_update';
    
    /**
     * The zikulatrivialmodule.tournament_post_update event is thrown after an existing new tournament
     * has been updated in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterTournamentEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const TOURNAMENT_POST_UPDATE = 'zikulatrivialmodule.tournament_post_update';
    
    /**
     * The zikulatrivialmodule.question_post_load event is thrown when questions
     * are loaded from the database.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterQuestionEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const QUESTION_POST_LOAD = 'zikulatrivialmodule.question_post_load';
    
    /**
     * The zikulatrivialmodule.question_pre_persist event is thrown before a new question
     * is created in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterQuestionEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const QUESTION_PRE_PERSIST = 'zikulatrivialmodule.question_pre_persist';
    
    /**
     * The zikulatrivialmodule.question_post_persist event is thrown after a new question
     * has been created in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterQuestionEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const QUESTION_POST_PERSIST = 'zikulatrivialmodule.question_post_persist';
    
    /**
     * The zikulatrivialmodule.question_pre_remove event is thrown before an existing question
     * is removed from the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterQuestionEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const QUESTION_PRE_REMOVE = 'zikulatrivialmodule.question_pre_remove';
    
    /**
     * The zikulatrivialmodule.question_post_remove event is thrown after an existing question
     * has been removed from the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterQuestionEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const QUESTION_POST_REMOVE = 'zikulatrivialmodule.question_post_remove';
    
    /**
     * The zikulatrivialmodule.question_pre_update event is thrown before an existing question
     * is updated in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterQuestionEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const QUESTION_PRE_UPDATE = 'zikulatrivialmodule.question_pre_update';
    
    /**
     * The zikulatrivialmodule.question_post_update event is thrown after an existing new question
     * has been updated in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterQuestionEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const QUESTION_POST_UPDATE = 'zikulatrivialmodule.question_post_update';
    
    /**
     * The zikulatrivialmodule.answer_post_load event is thrown when answers
     * are loaded from the database.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterAnswerEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const ANSWER_POST_LOAD = 'zikulatrivialmodule.answer_post_load';
    
    /**
     * The zikulatrivialmodule.answer_pre_persist event is thrown before a new answer
     * is created in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterAnswerEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const ANSWER_PRE_PERSIST = 'zikulatrivialmodule.answer_pre_persist';
    
    /**
     * The zikulatrivialmodule.answer_post_persist event is thrown after a new answer
     * has been created in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterAnswerEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const ANSWER_POST_PERSIST = 'zikulatrivialmodule.answer_post_persist';
    
    /**
     * The zikulatrivialmodule.answer_pre_remove event is thrown before an existing answer
     * is removed from the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterAnswerEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const ANSWER_PRE_REMOVE = 'zikulatrivialmodule.answer_pre_remove';
    
    /**
     * The zikulatrivialmodule.answer_post_remove event is thrown after an existing answer
     * has been removed from the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterAnswerEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const ANSWER_POST_REMOVE = 'zikulatrivialmodule.answer_post_remove';
    
    /**
     * The zikulatrivialmodule.answer_pre_update event is thrown before an existing answer
     * is updated in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterAnswerEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const ANSWER_PRE_UPDATE = 'zikulatrivialmodule.answer_pre_update';
    
    /**
     * The zikulatrivialmodule.answer_post_update event is thrown after an existing new answer
     * has been updated in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterAnswerEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const ANSWER_POST_UPDATE = 'zikulatrivialmodule.answer_post_update';
    
    /**
     * The zikulatrivialmodule.result_post_load event is thrown when results
     * are loaded from the database.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterResultEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const RESULT_POST_LOAD = 'zikulatrivialmodule.result_post_load';
    
    /**
     * The zikulatrivialmodule.result_pre_persist event is thrown before a new result
     * is created in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterResultEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const RESULT_PRE_PERSIST = 'zikulatrivialmodule.result_pre_persist';
    
    /**
     * The zikulatrivialmodule.result_post_persist event is thrown after a new result
     * has been created in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterResultEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const RESULT_POST_PERSIST = 'zikulatrivialmodule.result_post_persist';
    
    /**
     * The zikulatrivialmodule.result_pre_remove event is thrown before an existing result
     * is removed from the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterResultEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const RESULT_PRE_REMOVE = 'zikulatrivialmodule.result_pre_remove';
    
    /**
     * The zikulatrivialmodule.result_post_remove event is thrown after an existing result
     * has been removed from the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterResultEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const RESULT_POST_REMOVE = 'zikulatrivialmodule.result_post_remove';
    
    /**
     * The zikulatrivialmodule.result_pre_update event is thrown before an existing result
     * is updated in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterResultEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const RESULT_PRE_UPDATE = 'zikulatrivialmodule.result_pre_update';
    
    /**
     * The zikulatrivialmodule.result_post_update event is thrown after an existing new result
     * has been updated in the system.
     *
     * The event listener receives an
     * Zikula\TrivialModule\Event\FilterResultEvent instance.
     *
     * @see Zikula\TrivialModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const RESULT_POST_UPDATE = 'zikulatrivialmodule.result_post_update';
    
}
